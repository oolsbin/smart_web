<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hr">

<!-- 사원정보 삭제처리 -->
<delete id="delete">
delete from employees where employee_id = #{employee_id}
</delete>


<!-- 사원정보 수정저장처리 -->
<update id='update'>
update employees 
set last_name = #{last_name}, first_name = #{first_name}, email = #{email}
			, phone_number = #{phone_number}
			<if test='department_id == -1'>, department_id = null</if>
			<if test='department_id > -1'>, department_id = #{department_id}</if>
			, job_id = #{job_id}, hire_date = #{hire_date}, salary = #{salary}
			, 
			<choose>
				<when test="manager_id == -1">manager_id = null</when>
				<otherwise>manager_id = #{manager_id}</otherwise>
			</choose>			
where employee_id = #{employee_id}
</update>


<!-- 사원의 부서목록 조회 -->
<select id='employee_department' resultType='hr.DepartmentVO'>
select distinct department_id, nvl(department_name, '부서없음') department_name
from employees e left outer join departments d using(department_id)
order by department_name
</select>

<!-- 회사의 부서목록 조회 -->
<select id='hr_department' resultType='hr.DepartmentVO'>
select * from departments order by department_name
</select>

<!-- 회사의 업무목록 조회 -->
<select id='hr_job' resultType='hr.JobVO'>
select * from jobs order by job_title
</select>


<!-- 특정 사원정보 조회 -->
<select id='info' resultType='hr.EmployeeVO'>
select e.*, department_name, job_title, e.last_name || ' '|| e.first_name name
		, m.last_name || ' '|| m.first_name manager_name
from departments d right outer join employees e on e.department_id=d.department_id
inner join jobs j on j.job_id=e.job_id
left outer join employees m on e.manager_id = m.employee_id
where e.employee_id = #{employee_id}
</select>


<!-- 신규사원저장처리 -->
<insert id="insert">
insert into employees(employee_id, last_name, first_name, email, phone_number
						, salary, hire_date, job_id, department_id, manager_id)
values( employees_seq.nextval, #{last_name}, #{first_name}, #{email}, #{phone_number}
		, #{salary}, #{hire_date}, #{job_id}
		,
		<choose>
			<when test='department_id == -1'>null</when>
			<otherwise>#{department_id}</otherwise>
		</choose> 		
		,
		<choose>
			<when test='manager_id == -1'>null</when>
			<otherwise>#{manager_id}</otherwise>
		</choose> 		
		)						
</insert>


<!-- 회사의 매니저로 적용할 수 있는 사원목록 조회 -->
<select id='hr_manager' resultType='hr.EmployeeVO'>
select employee_id, last_name||' '||first_name name
from employees
order by name
</select> 


<!-- 특정 부서의 사원목록 조회 -->
<select id='department_employee' resultType='hr.EmployeeVO'>
select e.*, job_title, department_name 
from employees e inner join jobs j on e.job_id=j.job_id
     left outer join departments d on e.department_id = d.department_id
where nvl(e.department_id, 0) = #{department_id}     
order by employee_id
</select>


<!-- 사원목록 조회 -->
<select id="list" resultType='hr.EmployeeVO'>
select e.*, job_title, department_name 
from employees e inner join jobs j on e.job_id=j.job_id
     left outer join departments d on e.department_id = d.department_id
order by employee_id
</select>

</mapper>